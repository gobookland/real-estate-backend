let Location,ApolloError;_d65‍.x([["locations",()=>locations],["addLocation",()=>addLocation],["deleteLocation",()=>deleteLocation]]);_d65‍.w("../../models/Location",[["default",["Location"],function(v){Location=v}]]);_d65‍.w("apollo-server",[["ApolloError",["ApolloError"],function(v){ApolloError=v}]]);


// List all locations
       const locations = async () => {
	try {
		const locations = await Location.find({});

		return locations;
	} catch (e) {
		_d65‍.g.console.log(e);
	}
};

// Add Location
       const addLocation = async (_, { locationInput }) => {
	try {
		const { name, image } = locationInput;

		const exist = await Location.find({ name });
		if (exist.length !== 0) {
			return new ApolloError('Duplicate Location', 'duplicate');
		}

		const location = new Location({
			name,
			image,
		});

		await location.save();
		return location;
	} catch (e) {
		_d65‍.g.console.log(e);
	}
};

// Delete a Location with locationName
       const deleteLocation = async (_, { name }) => {
	try {
		const location = await Location.findOneAndDelete({ name });
		return location;
	} catch (e) {
		_d65‍.g.console.log(e);
	}
};
